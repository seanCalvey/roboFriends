{"version":3,"sources":["components/ErrorBoundry.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["ErrorBoundry","props","state","error","info","this","setState","children","Component","Card","id","name","email","className","alt","src","CardList","robots","map","robot","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","React","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","res","json","data","catch","Boolean","window","location","hostname","match","intialStateSearch","intialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"gTAyBeA,E,YArBd,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CACTC,OAAO,GAHG,E,+EAOAA,EAAOC,GACrBC,KAAKC,SAAS,CAACH,OAAO,M,+BAItB,OAAIE,KAAKH,MAAMC,MACL,yDAECE,KAAKJ,MAAMM,a,GAjBAC,aCaZC,EAbF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,GAAGC,EAAgB,EAAhBA,KAAKC,EAAW,EAAXA,MAEnB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,MAAMC,IAAG,yCAAoCL,EAApC,cAClB,6BACI,4BAAKC,GACL,2BAAIC,MCcLI,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEf,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAOC,GACf,OAAQ,kBAAC,EAAD,CACAC,IAAKD,EACLV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCC9BU,EAbG,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,aACjB,OACI,yBAAKV,UAAU,OACX,2BACIA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCXI,G,MARA,SAAC1B,GACZ,OACI,yBAAK2B,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,WAChE9B,EAAMM,YCqBbyB,E,4LAGE3B,KAAKJ,MAAMgC,oB,+BAGL,IAAD,EACoD5B,KAAKJ,MAAvDiC,EADF,EACEA,YAAaC,EADf,EACeA,eAAgBlB,EAD/B,EAC+BA,OAAQmB,EADvC,EACuCA,UAEtCC,EAAiBpB,EAAOqB,QAAO,SAAAnB,GACjC,OAAOA,EAAMR,KAAK4B,cAAcC,SAASN,EAAYK,kBAGzD,OAAIH,EACO,wBAAIvB,UAAU,MAAd,WAGH,yBAAKA,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAcY,IACzB,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUlB,OAAQoB,W,GAtB5BI,IAAMjC,WAgCTkC,eAhDS,SAAAxC,GACpB,MAAO,CACHgC,YAAahC,EAAMyC,aAAaT,YAChCjB,OAAQf,EAAM0C,cAAc3B,OAC5BmB,UAAWlC,EAAM0C,cAAcR,UAC/BjC,MAAOD,EAAM0C,cAAczC,UAIR,SAAC0C,GACxB,MAAO,CACHV,eAAgB,SAACW,GAAD,OAAWD,ECbM,CACrCrB,KCT+B,uBDU/BuB,QDWuDD,EAAME,OAAOC,SAChEhB,gBAAiB,kBAAMY,GCTI,SAACA,GAChCA,EAAS,CAAErB,KCbuB,2BDclC0B,MAAM,8CACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIT,EAAS,CAAErB,KCfK,yBDeyBuB,QAASO,OAC/DC,OAAM,SAAApD,GAAK,OAAI0C,EAAS,CAAErB,KCfE,wBDe2BuB,QAAS5C,cDwC1DuC,CAA6CV,GG9CxCwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAAoB,CACtB3B,YAAc,IAYZ4B,EAAoB,CACtB1B,WAAY,EACZnB,OAAQ,GACRd,MAAO,ICVL4D,EAAQC,yBACRC,EAAcC,YAAgB,CAACvB,aDHT,WAA6C,IAA5CzC,EAA2C,uDAAnC2D,EAAmBM,EAAgB,uDAAP,GAC7D,OAAQA,EAAO3C,MACX,IFZ2B,uBEavB,OAAO4C,OAAOC,OAAO,GAAKnE,EAAO,CAACgC,YAAYiC,EAAOpB,UACzD,QACI,OAAO7C,ICFgC0C,cDYtB,WAA2C,IAA1C1C,EAAyC,uDAAjC4D,EAAmBK,EAAc,uDAAP,GAC5D,OAAQA,EAAO3C,MACX,IF1B8B,yBE2B1B,OAAO4C,OAAOC,OAAO,GAAInE,EAAO,CAACkC,WAAW,IAChD,IF3B8B,yBE4B1B,OAAOgC,OAAOC,OAAO,GAAInE,EAAO,CAACe,OAAQkD,EAAOpB,QAASX,WAAW,IACxE,IF5B6B,wBE6BzB,OAAOgC,OAAOC,OAAO,GAAInE,EAAO,CAACC,MAAOgE,EAAOpB,QAASX,WAAW,IACvE,QACI,OAAOlC,MCpBboE,EAAQC,YAAYN,EAAaO,YAAgBC,IAAgBV,IAEvEW,IAASC,OACL,kBAAC,IAAD,CAAUL,MAAOA,GACb,kBAAC,EAAD,OAEJM,SAASC,eAAe,SF+GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEd3B,OAAM,SAAApD,GACLgF,QAAQhF,MAAMA,EAAMiF,c","file":"static/js/main.ee027d53.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\r\n constructor(props){\r\n     super(props);\r\n     this.state = {\r\n         error: false\r\n     }\r\n }\r\n\r\n componentDidCatch(error, info) {\r\n     this.setState({error: true})\r\n }\r\n\r\n render() {\r\n     if (this.state.error) {\r\n        return <h1>Ooooops. That is not good</h1>\r\n     } else {\r\n         return this.props.children;\r\n     }\r\n }\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\n\r\nconst Card = ({id,name,email}) => {\r\n\r\n    return(\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc'>\r\n            <img alt='bot' src={`https://robohash.org/SeanCalvey${id}?200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from \"./Card\";\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((robot, i) => {\r\n                    return (<Card\r\n                            key={i}\r\n                            id={robots[i].id}\r\n                            name={robots[i].name}\r\n                            email={robots[i].email}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='search robots'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '1000px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport {connect} from 'react-redux'\r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll';\r\nimport {setSearchField, requestRobots} from \"../actions\";\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n};\r\n\r\nclass App extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots()\r\n    }\r\n\r\n    render() {\r\n        const {searchField, onSearchChange, robots, isPending} = this.props;\r\n\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        });\r\n\r\n        if (isPending) {\r\n            return <h1 className='tc'>Loading</h1>\r\n        } else {\r\n            return (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>RoboFriends</h1>\r\n                    <SearchBox searchChange={onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots}/>\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(res => res.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n};","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD_';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\nconst intialStateSearch = {\r\n    searchField : '',\r\n};\r\n\r\nexport const searchRobots = (state = intialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({} , state, {searchField:action.payload} );\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst intialStateRobots = {\r\n    isPending : false,\r\n    robots: [],\r\n    error: ''\r\n};\r\n\r\nexport const requestRobots = (state = intialStateRobots, action={}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload ,isPending: false});\r\n        default:\r\n            return state;\r\n    }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport {createStore, applyMiddleware, combineReducers} from 'redux'\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport 'tachyons'\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots, requestRobots} from \"./reducers\";\n\nconst logger =createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware,logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}